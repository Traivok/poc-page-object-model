<?xml version="1.0" encoding="UTF-8"?>
<files>
	<file path='.gitignore'>
		dist/
		node_modules</file>
	<file path='codebase.stats.md'><![CDATA[
		# 🧾 Flatten Stats for codebase.xml
		
		## 📊 Summary
		- Total source size: 34.2 KB
		- Generated XML size: 36.9 KB
		- Total lines of code: 984
		- Estimated tokens: 9,438
		- File breakdown: 12 text, 0 binary, 0 errors
		
		## 📈 Size Percentiles
		Avg: 2,919 B, Median: 1,195 B, p90: 8,033 B, p95: 13,326 B, p99: 13,326 B
		
		## 🧮 Size Histogram
		| Bucket | Files | Bytes |
		| --- | ---: | ---: |
		| 0–1KB | 4 | 1,200 |
		| 1–10KB | 7 | 20,507 |
		| 10–100KB | 1 | 13,326 |
		| 100KB–1MB | 0 | 0 |
		| 1–10MB | 0 | 0 |
		| 10–100MB | 0 | 0 |
		| >=100MB | 0 | 0 |
		
		## 📦 Top Extensions by Bytes (Top 20)
		| Ext | Files | Bytes | % of total |
		| --- | ---: | ---: | ---: |
		| .ts | 8 | 25,131 | 71.74% |
		| .md | 1 | 8,033 | 22.93% |
		| .json | 2 | 1,850 | 5.28% |
		| <none> | 1 | 19 | 0.05% |
		
		## 📂 Top Directories by Bytes (Top 20)
		| Directory | Files | Bytes | % of total |
		| --- | ---: | ---: | ---: |
		| src | 8 | 25,131 | 71.74% |
		| src/pages | 3 | 18,368 | 52.43% |
		| src/pages/quotes | 1 | 13,326 | 38.04% |
		| . | 4 | 9,902 | 28.26% |
		| src/config | 2 | 2,957 | 8.44% |
		| src/examples | 1 | 2,164 | 6.18% |
		| src/types | 1 | 1,195 | 3.41% |
		| src/utils | 1 | 447 | 1.28% |
		
		## 🌳 Depth Distribution
		| Depth | Count |
		| ---: | ---: |
		| 1 | 4 |
		| 3 | 7 |
		| 4 | 1 |
		
		## 🧵 Longest Paths (Top 25)
		| Path | Length | Bytes |
		| --- | ---: | ---: |
		| src/examples/yahoo-finance-scraper.ts | 37 | 2,164 |
		| src/pages/quotes/subpage.model.ts | 33 | 13,326 |
		| src/pages/sandbox-list.model.ts | 31 | 0 |
		| src/config/selectors.config.ts | 30 | 1,647 |
		| src/config/browser.config.ts | 28 | 1,310 |
		| src/pages/home.model.ts | 23 | 5,042 |
		| src/utils/index.ts | 18 | 447 |
		| src/types/index.ts | 18 | 1,195 |
		| tsconfig.json | 13 | 1,116 |
		| package.json | 12 | 734 |
		| .gitignore | 10 | 19 |
		| README.md | 9 | 8,033 |
		
		## ⏱️ Temporal
		- Oldest: src/pages/sandbox-list.model.ts (2025-09-01T22:37:27.711Z)
		- Newest: src/examples/yahoo-finance-scraper.ts (2025-09-02T00:44:20.803Z)
		
		| Age | Files | Bytes |
		| --- | ---: | ---: |
		| > 1 year | 0 | 0 |
		| 6–12 months | 0 | 0 |
		| 1–6 months | 0 | 0 |
		| 7–30 days | 0 | 0 |
		| 1–7 days | 0 | 0 |
		| < 1 day | 12 | 35,033 |
		
		## ✅ Quality Signals
		- Zero-byte files: 1
		- Empty text files: 1
		- Hidden files: 1
		- Symlinks: 0
		- Large files (>= 50 MB): 0
		- Suspiciously large files (>= 100 MB): 0
		
		## 🗜️ Compressibility
		Sampled compressibility ratio: 33.82%
		
		## 🔧 Git
		- Tracked: 12 files, 35,033 bytes
		- Untracked: 0 files, 0 bytes
		
		## 📚 Largest Files (Top 50)
		| Path | Size | % of total | LOC |
		| --- | ---: | ---: | ---: |
		| src/pages/quotes/subpage.model.ts | 13.0 KB | 38.04% | 295 |
		| README.md | 7.8 KB | 22.93% | 276 |
		| src/pages/home.model.ts | 4.9 KB | 14.39% | 116 |
		| src/examples/yahoo-finance-scraper.ts | 2.1 KB | 6.18% | 61 |
		| src/config/selectors.config.ts | 1.6 KB | 4.70% | 48 |
		| src/config/browser.config.ts | 1.3 KB | 3.74% | 48 |
		| src/types/index.ts | 1.2 KB | 3.41% | 55 |
		| tsconfig.json | 1.1 KB | 3.19% | 44 |
		| package.json | 734 B | 2.10% | 24 |
		| src/utils/index.ts | 447 B | 1.28% | 13 |
		| .gitignore | 19 B | 0.05% | 3 |
		| src/pages/sandbox-list.model.ts | 0 B | 0.00% | 1 |]]></file>
	<file path='codebase.xml'><![CDATA[
		<?xml version="1.0" encoding="UTF-8"?>
		<files>
			<file path='.gitignore'>
				dist/
				node_modules</file>
			<file path='package.json'>
				{
				    "name": "poc-page-object-model",
				    "version": "1.0.0",
				    "description": "Page Object Model POC for RPA Standards using TypeScript and Puppeteer",
				    "type": "module",
				    "main": "src/examples/yahoo-finance-scraper.ts",
				    "scripts": {
				        "start": "npx tsx src/examples/yahoo-finance-scraper.ts",
				        "dev": "npx tsx src/examples/yahoo-finance-scraper.ts",
				        "build": "tsc",
				        "lint": "tsc --noEmit"
				    },
				    "keywords": ["rpa", "page-object-model", "puppeteer", "typescript", "automation"],
				    "author": "RPA Team",
				    "license": "MIT",
				    "devDependencies": {
				        "@types/node": "^24.3.0",
				        "typescript": "^5.9.2"
				    },
				    "dependencies": {
				        "puppeteer": "^24.18.0"
				    }
				}</file>
			<file path='README.md'><![CDATA[
				# Page Object Model POC for RPA Standards
				
				This project demonstrates a standardized approach to implementing the Page Object Model (POM) pattern for Robotic Process Automation (RPA) using TypeScript and Puppeteer.
				
				## 🎯 Purpose
				
				This POC establishes coding standards and architectural patterns for RPA projects, focusing on:
				
				- **Maintainable Code**: Clear separation of concerns using Page Object Model
				- **Type Safety**: Full TypeScript implementation with comprehensive type definitions
				- **Error Handling**: Robust error handling with detailed logging and meaningful error messages
				- **Configuration Management**: Centralized configuration for selectors and browser settings
				- **Documentation**: Comprehensive JSDoc documentation for all public APIs
				
				## 📁 Project Structure
				
				```
				src/
				├── config/                 # Configuration files
				│   ├── browser.config.ts   # Puppeteer browser configurations
				│   └── selectors.config.ts # Centralized CSS selectors
				├── pages/                  # Page Object Models
				│   ├── home.model.ts       # Yahoo Finance home page
				│   └── quotes/             # Quote-related pages
				│       └── subpage.model.ts # Quote sub-pages (news, history, etc.)
				├── types/                  # TypeScript type definitions
				│   └── index.ts           # Common interfaces and types
				└── examples/              # Usage examples
				    └── yahoo-finance-scraper.ts # Complete scraping example
				```
				
				## 🏗️ Architecture Patterns
				
				### Page Object Model (POM)
				
				Each page is represented by a class that encapsulates:
				- **Page validation** (`isInPage()` method)
				- **User interactions** (clicks, form fills, navigation)
				- **Data extraction** (scraping structured data)
				- **Error handling** with meaningful exceptions
				
				```typescript
				/**
				 * Example Page Object Model implementation
				 */
				export class YahooFinanceHomeModel extends PageModel {
				    /**
				     * Validates if current page is the home page
				     * @throws {Error} When page validation fails
				     */
				    public async isInPage(): Promise<boolean> {
				        // Implementation with error handling
				    }
				
				    /**
				     * Navigates to stock quote page
				     * @param {string} symbol - Stock symbol (e.g., 'AAPL')
				     * @throws {Error} When navigation fails
				     */
				    public async goToQuote(symbol: string): Promise<void> {
				        // Implementation with validation
				    }
				}
				```
				
				### Configuration Management
				
				Centralized configuration prevents selector duplication and makes maintenance easier:
				
				```typescript
				// selectors.config.ts
				export const YAHOO_FINANCE_SELECTORS = {
				    HOME: {
				        QUOTE_LOOKUP_INPUT: 'input[data-module="SearchForm"]'
				    },
				    HISTORICAL: {
				        DATA_TABLE: 'table.table.yf-1jecxey'
				    }
				} as const;
				```
				
				### Error Handling Standards
				
				All public methods include:
				- **Input validation** with meaningful error messages
				- **Try-catch blocks** around DOM operations
				- **Detailed logging** for debugging
				- **Typed exceptions** with context information
				
				```typescript
				public async goToQuote(symbol: string): Promise<void> {
				    if (!symbol || typeof symbol !== 'string') {
				        throw new Error('Stock symbol must be a non-empty string');
				    }
				
				    try {
				        // Implementation
				    } catch (error) {
				        console.error('[YahooFinanceHomeModel] Navigation failed:', error);
				        throw new Error(`Failed to navigate to quote for symbol ${symbol}: ${error}`);
				    }
				}
				```
				
				## 🚀 Getting Started
				
				### Prerequisites
				
				- Node.js 16+ 
				- TypeScript 4.5+
				- Puppeteer
				
				### Installation
				
				```bash
				npm install
				```
				
				### Running the Example
				
				```bash
				# Run the Yahoo Finance scraper example
				npx tsx src/examples/yahoo-finance-scraper.ts
				```
				
				## 📖 Usage Examples
				
				### Basic Page Navigation
				
				```typescript
				import puppeteer from 'puppeteer';
				import { YahooFinanceHomeModel } from './pages/home.model';
				import { DEFAULT_BROWSER_CONFIG } from './config/browser.config';
				
				const browser = await puppeteer.launch(DEFAULT_BROWSER_CONFIG);
				const page = await browser.newPage();
				
				await page.goto('https://finance.yahoo.com/');
				const homeModel = new YahooFinanceHomeModel({ page });
				
				// Validate we're on the correct page
				await homeModel.validatePage();
				
				// Navigate to a stock quote
				await homeModel.goToQuote('AAPL');
				```
				
				### Data Extraction
				
				```typescript
				import { HistoricalDataModel } from './pages/quotes/subpage.model';
				
				const historicalModel = new HistoricalDataModel({ page });
				await historicalModel.validatePage();
				
				// Configure date range and frequency
				await historicalModel.configurePeriod(
				    new Date('2025-01-01'), 
				    new Date('2025-12-31')
				);
				await historicalModel.configureFrequency('Daily');
				
				// Extract structured data
				const data = await historicalModel.extractHistoricalData();
				console.log(data); // Array of HistoricalData objects
				```
				
				## 🛠️ Development Standards
				
				### JSDoc Documentation
				
				All public methods must include:
				- **Description** of functionality
				- **Parameter documentation** with types and examples
				- **Return type** documentation
				- **@throws** tags for all possible exceptions
				- **@example** blocks for complex methods
				
				### TypeScript Standards
				
				- **Strict mode** enabled in `tsconfig.json`
				- **Explicit return types** for all public methods
				- **Input validation** for all parameters
				- **Null safety** with proper type guards
				
				### Error Handling
				
				- **Never fail silently** - always throw meaningful errors
				- **Log context** before throwing exceptions
				- **Validate inputs** at method entry points
				- **Use typed exceptions** with descriptive messages
				
				### Logging Standards
				
				- **Consistent prefixes** using class names in brackets
				- **Log all major operations** (navigation, validation, data extraction)
				- **Include relevant context** in log messages
				- **Use appropriate log levels** (info, warn, error)
				
				## 🔧 Configuration
				
				### Browser Settings
				
				Three pre-configured browser setups:
				
				- **`DEFAULT_BROWSER_CONFIG`**: Standard development setup
				- **`HEADLESS_BROWSER_CONFIG`**: Production/CI environment
				- **`DEBUG_BROWSER_CONFIG`**: Development with DevTools and slow motion
				
				### Selector Management
				
				All CSS selectors are centralized in `src/config/selectors.config.ts`:
				
				- **Organized by page/feature**
				- **Typed as const** for IntelliSense support
				- **Descriptive naming** following BEM-like conventions
				- **Easy to update** when UI changes
				
				## 🧪 Testing Strategy
				
				While this POC doesn't include tests, the architecture supports:
				
				- **Unit testing** of individual page methods
				- **Integration testing** of complete user flows
				- **Mock-friendly design** with dependency injection
				- **Deterministic behavior** through proper error handling
				
				## 📋 Best Practices
				
				### Page Object Design
				
				1. **Single Responsibility**: Each page object handles one page/component
				2. **Encapsulation**: Hide implementation details, expose clean APIs
				3. **Validation**: Always validate page state before operations
				4. **Immutability**: Don't modify page objects after creation
				
				### Selector Strategy
				
				1. **Prefer data attributes** over CSS classes for stability
				2. **Use semantic selectors** that reflect business meaning
				3. **Centralize selectors** to avoid duplication
				4. **Document selector purposes** in configuration files
				
				### Error Management
				
				1. **Fail fast** with clear error messages
				2. **Provide context** in all error messages
				3. **Log before throwing** for debugging support
				4. **Use specific error types** for different failure modes
				
				## 🔄 Maintenance
				
				### Updating Selectors
				
				When Yahoo Finance updates their UI:
				
				1. Update selectors in `src/config/selectors.config.ts`
				2. Test with the example scraper
				3. Update documentation if behavior changes
				
				### Adding New Pages
				
				1. Create new page object extending `PageModel`
				2. Implement required abstract methods
				3. Add selectors to configuration
				4. Include comprehensive JSDoc documentation
				5. Add usage example
				
				## 📝 License
				
				This is a proof of concept for internal RPA standards. Adapt as needed for your organization's requirements.
				
				---
				
				**Note**: This POC uses Yahoo Finance as an example target. Always respect robots.txt and terms of service when scraping websites in production.]]]]><![CDATA[></file>
			<file path='src/config/browser.config.ts'>
				/**
				 * Browser configuration for RPA automation
				 * Defines standard settings for Puppeteer browser instances
				 */
				
				import type { LaunchOptions } from 'puppeteer';
				
				/**
				 * Default browser configuration for RPA automation
				 * @description Standard Puppeteer launch options optimized for web scraping and automation
				 */
				export const DEFAULT_BROWSER_CONFIG: LaunchOptions = {
				    headless: false, // Set to true for production environments
				    defaultViewport: {
				        width: 1920,
				        height: 1080
				    },
				    args: [
				        '--no-sandbox',
				        '--disable-setuid-sandbox',
				        '--disable-dev-shm-usage',
				        '--disable-accelerated-2d-canvas',
				        '--no-first-run',
				        '--no-zygote',
				        '--disable-gpu'
				    ]
				};
				
				/**
				 * Headless browser configuration for production environments
				 * @description Optimized for server environments without display
				 */
				export const HEADLESS_BROWSER_CONFIG: LaunchOptions = {
				    ...DEFAULT_BROWSER_CONFIG,
				    headless: true
				};
				
				/**
				 * Debug browser configuration with extended timeouts
				 * @description Useful for development and debugging automation scripts
				 */
				export const DEBUG_BROWSER_CONFIG: LaunchOptions = {
				    ...DEFAULT_BROWSER_CONFIG,
				    headless: false,
				    devtools: true,
				    slowMo: 100 // Slow down operations by 100ms for debugging
				};</file>
			<file path='src/config/selectors.config.ts'>
				/**
				 * Centralized selector configuration for Yahoo Finance automation
				 * @description Maintains all CSS selectors in one place for easier maintenance
				 */
				
				/**
				 * Yahoo Finance selector mappings
				 * @description Contains all selectors used across Yahoo Finance page objects
				 */
				export const YAHOO_FINANCE_SELECTORS = {
				    /** Home page selectors */
				    HOME: {
				        QUOTE_LOOKUP_INPUT: 'input[aria-label="Quote Lookup"]',
				        SEARCH_BUTTON: 'button[data-module="SearchForm"]'
				    },
				    
				    /** Quote page selectors */
				    QUOTE: {
				        QUOTE_LOOKUP_INPUT: 'input[aria-label="Quote Lookup"]',
				        NEWS_TAB: 'a[href*="/news"]',
				        HISTORY_TAB: 'a[href*="/history"]'
				    },
				    
				    /** Historical data selectors */
				    HISTORICAL: {
				        DATE_RANGE_SELECTOR: 'div[data-test="date-picker-full-range"]',
				        DATE_PICKER_MODAL: 'div[data-test="date-picker"]',
				        START_DATE_INPUT: 'input[data-test="start-date"]',
				        END_DATE_INPUT: 'input[data-test="end-date"]',
				        DONE_BUTTON: 'button[data-test="date-picker-done"]',
				        FREQUENCY_SELECTOR: 'div[data-ylk="interval-select"]',
				        FREQUENCY_DROPDOWN: 'div[data-test="select-container"]',
				        DATA_TABLE: 'table.table.yf-1jecxey',
				        TABLE_ROWS: 'table.table.yf-1jecxey tbody tr'
				    }
				} as const;
				
				/**
				 * Common selector patterns for reusability
				 * @description Generic selectors that can be used across different pages
				 */
				export const COMMON_SELECTORS = {
				    LOADING_SPINNER: '[data-test="loading"]',
				    ERROR_MESSAGE: '[data-test="error"]',
				    MODAL_OVERLAY: '[data-test="modal"]',
				    CLOSE_BUTTON: '[data-test="close"]'
				} as const;</file>
			<file path='src/examples/yahoo-finance-scraper.ts'><![CDATA[
				/**
				 * Yahoo Finance Historical Data Scraper Example
				 * @description Demonstrates the Page Object Model pattern for RPA automation
				 * @author RPA Team
				 */
				
				import puppeteer from 'puppeteer';
				import { YahooFinanceHomeModel } from '../pages/home.model';
				import { HistoricalDataModel } from '../pages/quotes/subpage.model';
				import { DEFAULT_BROWSER_CONFIG } from '../config/browser.config';
				
				/**
				 * Main execution function for Yahoo Finance data scraping
				 * @description Orchestrates the complete flow from navigation to data extraction
				 * @throws {Error} When browser launch fails or page navigation errors occur
				 */
				async function main(): Promise<void> {
				    const browser = await puppeteer.launch(DEFAULT_BROWSER_CONFIG);
				    const page = await browser.newPage();
				    
				    try {
				        // Navigate to Yahoo Finance home page
				        await page.goto('https://finance.yahoo.com/', { 
				            waitUntil: 'domcontentloaded',
				            timeout: 60000 
				        });
				        const homeModel = new YahooFinanceHomeModel({ page });
				        await homeModel.validatePage();
				
				        // Search for AAPL stock
				        await homeModel.goToQuote('AAPL');
				        
				        // Navigate to historical data page
				        await page.goto(`https://finance.yahoo.com/quote/AAPL/history`, { 
				            waitUntil: 'domcontentloaded',
				            timeout: 30000 
				        });
				        
				        // Create historical data model and validate
				        const historicalDataModel = new HistoricalDataModel({ page });
				        await historicalDataModel.validatePage();
				        
				        // Configure date range and frequency
				        await historicalDataModel.configurePeriod(new Date('2025-01-01'), new Date('2025-12-31'));
				        await historicalDataModel.configureFrequency('Daily');
				        
				        // Extract and display historical data
				        const historicalData = await historicalDataModel.extractHistoricalData();
				        console.log(historicalData);
				        
				    } catch (error) {
				        console.error('Scraping failed:', error);
				        throw error;
				    } finally {
				        await browser.close();
				    }
				}
				
				// Execute main function with error handling
				main().catch(console.error);]]]]><![CDATA[></file>
			<file path='src/pages/home.model.ts'><![CDATA[
				import { Page } from "puppeteer";
				/**
				 * Yahoo Finance Home Page Model
				 * @description Page Object Model for Yahoo Finance home page interactions
				 * @extends PageModel
				 */
				
				import { PageModel, type PageModelConstructorArguments } from "../types";
				import { YAHOO_FINANCE_SELECTORS } from "../config/selectors.config";
				
				/**
				 * Yahoo Finance Home Page Model
				 * @description Handles interactions with the Yahoo Finance home page including navigation and stock symbol searches
				 */
				export class YahooFinanceHomeModel extends PageModel {
				    /**
				     * Creates an instance of YahooFinanceHomeModel
				     * @param {PageModelConstructorArguments} args - Constructor arguments containing page instance
				     */
				    constructor(args: PageModelConstructorArguments) {
				        super(args);
				    }
				
				    /**
				     * Validates if the current page is the Yahoo Finance home page
				     * @description Checks page title and presence of quote lookup input to confirm home page
				     * @returns {Promise<boolean>} True if on Yahoo Finance home page, false otherwise
				     * @throws {Error} When page validation fails due to network or DOM issues
				     */
				    public override async isInPage(): Promise<boolean> {
				        console.log('[YahooFinanceHomeModel] Checking if in home page...');
				        
				        try {
				            const title = await this.page.title();
				            console.log('[YahooFinanceHomeModel] Page title:', title);
				            
				            const hasQuoteLookup = await this.page.$(YAHOO_FINANCE_SELECTORS.HOME.QUOTE_LOOKUP_INPUT);
				            console.log('[YahooFinanceHomeModel] Quote lookup element found:', !!hasQuoteLookup);
				            
				            const isHomePage = title.includes('Yahoo Finance') && !!hasQuoteLookup;
				            console.log('[YahooFinanceHomeModel] Home page validation successful');
				            
				            return isHomePage;
				        } catch (error) {
				            console.error('[YahooFinanceHomeModel] Page validation failed:', error);
				            throw new Error(`Failed to validate Yahoo Finance home page: ${error}`);
				        }
				    }
				
				    /**
				     * Navigates to a specific stock quote page
				     * @description Searches for a stock symbol and navigates to its quote page
				     * @param {string} symbol - Stock symbol to search for (e.g., 'AAPL', 'GOOGL')
				     * @returns {Promise<void>}
				     * @throws {Error} When navigation fails or stock symbol is not found
				     * @example
				     * ```typescript
				     * const homeModel = new YahooFinanceHomeModel({ page });
				     * await homeModel.goToQuote('AAPL');
				     * ```
				     */
				    public async goToQuote(symbol: string): Promise<void> {
				        if (!symbol || typeof symbol !== 'string') {
				            throw new Error('Stock symbol must be a non-empty string');
				        }
				
				        console.log('[YahooFinanceHomeModel] Navigating to quote for symbol:', symbol);
				        
				        try {
				            // Look for the quote lookup input
				            console.log('[YahooFinanceHomeModel] Looking for quote lookup input...');
				            const quoteInput = await this.page.waitForSelector(YAHOO_FINANCE_SELECTORS.HOME.QUOTE_LOOKUP_INPUT);
				            
				            if (!quoteInput) {
				                throw new Error('Quote lookup input not found');
				            }
				            
				            // Clear existing content and type the symbol
				            console.log('[YahooFinanceHomeModel] Typing symbol into input...');
				            await quoteInput.click({ clickCount: 3 }); // Select all existing text
				            await quoteInput.type(symbol);
				            
				            // Press Enter to search
				            console.log('[YahooFinanceHomeModel] Pressing Enter to search...');
				            await Promise.all([
				                this.page.waitForNavigation({ waitUntil: 'networkidle0', timeout: 10000 }).catch(() => {
				                    // Navigation might not trigger a full page reload, that's okay
				                    console.log('[YahooFinanceHomeModel] No full navigation detected, checking URL change...');
				                }),
				                this.page.keyboard.press('Enter')
				            ]);
				            
				            // Wait for URL to change to quote page
				            console.log('[YahooFinanceHomeModel] Waiting for URL to change...');
				            await this.page.waitForFunction(
				                (expectedSymbol) => window.location.href.includes(`/quote/${expectedSymbol}`),
				                { timeout: 15000 },
				                symbol
				            );
				            
				            const finalUrl = this.page.url();
				            console.log('[YahooFinanceHomeModel] Navigation completed. Final URL:', finalUrl);
				            
				            // Validate that we reached the quote page
				            if (!finalUrl.includes(`/quote/${symbol}`)) {
				                throw new Error(`Failed to navigate to quote page for symbol: ${symbol}`);
				            }
				        } catch (error) {
				            console.error('[YahooFinanceHomeModel] Navigation failed:', error);
				            throw new Error(`Failed to navigate to quote for symbol ${symbol}: ${error}`);
				        }
				    }
				}
				
				export default YahooFinanceHomeModel;]]]]><![CDATA[></file>
			<file path='src/pages/quotes/subpage.model.ts'><![CDATA[
				/**
				 * Yahoo Finance Quote Sub-Page Models
				 * @description Page Object Models for Yahoo Finance quote-related pages (news, charts, historical data)
				 * @author RPA Team
				 */
				
				import { PageModel, type PageModelConstructorArguments } from "../../types";
				import { YAHOO_FINANCE_SELECTORS } from "../../config/selectors.config";
				
				/**
				 * Abstract base class for Yahoo Finance quote sub-pages
				 * @description Provides common functionality for all quote-related sub-pages
				 * @abstract
				 * @extends PageModel
				 */
				export abstract class YahooFinanceQuoteSubPageModel extends PageModel {
				    /** URL pattern that validates the specific sub-page */
				    protected abstract urlPattern: RegExp;
				
				    /**
				     * Creates an instance of YahooFinanceQuoteSubPageModel
				     * @param {PageModelConstructorArguments} args - Constructor arguments containing page instance
				     */
				    constructor(args: PageModelConstructorArguments) {
				        super(args);
				    }
				
				    /**
				     * Validates if the current page matches the expected quote sub-page
				     * @description Checks for quote lookup element and validates URL pattern
				     * @returns {Promise<boolean>} True if on the correct quote sub-page, false otherwise
				     * @throws {Error} When page validation fails due to network or DOM issues
				     */
				    public override async isInPage(): Promise<boolean> {
				        console.log('[YahooFinanceQuoteSubPageModel] Checking if in page...');
				        
				        try {
				            // Common requirement for all quote pages - presence of quote lookup
				            const hasQuoteLookup = await this.page.$(YAHOO_FINANCE_SELECTORS.QUOTE.QUOTE_LOOKUP_INPUT);
				            console.log('[YahooFinanceQuoteSubPageModel] Quote lookup element found:', !!hasQuoteLookup);
				            if (!hasQuoteLookup) return false;
				
				            // Validate URL against the pattern defined in the subclass
				            const url = this.page.url();
				            const isValidUrl = this.urlPattern.test(url);
				            console.log('[YahooFinanceQuoteSubPageModel] URL validation:', { url, pattern: this.urlPattern.toString(), isValid: isValidUrl });
				            return isValidUrl;
				        } catch (error) {
				            console.error('[YahooFinanceQuoteSubPageModel] Page validation failed:', error);
				            throw new Error(`Failed to validate quote sub-page: ${error}`);
				        }
				    }
				
				    public async openSummary(): Promise<YahooFinanceQuoteSummaryModel> {
				        await this.goToSubPage('summary');
				        return new YahooFinanceQuoteSummaryModel({ page: this.page });
				    }
				
				    public async openNews(): Promise<YahooFinanceQuoteNewsModel> {
				        await this.goToSubPage('news');
				        return new YahooFinanceQuoteNewsModel({ page: this.page });
				    }
				
				    public async openCharts(): Promise<YahooFinanceQuoteChartsModel> {
				        await this.goToSubPage('chart');
				        return new YahooFinanceQuoteChartsModel({ page: this.page });
				    }
				
				    public async openHistoricalData(): Promise<HistoricalDataModel> {
				        await this.goToSubPage('history');
				        return new HistoricalDataModel({ page: this.page });
				    }
				
				    private async goToSubPage(category: 'summary' | 'news' | 'chart' | 'history'): Promise<void> {
				        console.log(`[YahooFinanceQuoteSubPageModel] Navigating to ${category} page...`);
				        
				        const currentUrl = this.page.url();
				        // Remove trailing slash and any existing subpage paths
				        const baseUrl = currentUrl.replace(/\/(news|chart|chart|history)\/?$/, '').replace(/\/$/, '');
				        
				        let targetUrl: string;
				        if (category === 'summary') {
				            targetUrl = baseUrl + '/';
				        } else if (category === 'chart') {
				            targetUrl = `${baseUrl}/chart`;
				        } else {
				            targetUrl = `${baseUrl}/${category}`;
				        }
				        
				        console.log(`[YahooFinanceQuoteSubPageModel] Navigation details:`, { currentUrl, baseUrl, targetUrl, category });
				        
				        try {
				            await this.page.goto(targetUrl, { waitUntil: 'domcontentloaded', timeout: 15000 });
				            console.log(`[YahooFinanceQuoteSubPageModel] Successfully navigated to ${category} page`);
				        } catch (error) {
				            console.error(`[YahooFinanceQuoteSubPageModel] Navigation to ${category} failed:`, error);
				            throw error;
				        }
				    }
				}
				
				
				import type { HistoricalData } from "../../types";
				
				export class YahooFinanceQuoteSummaryModel extends YahooFinanceQuoteSubPageModel {
				    protected override urlPattern = /^https:\/\/finance\.yahoo\.com\/quote\/\w+\/?$/;
				}
				
				export class YahooFinanceQuoteNewsModel extends YahooFinanceQuoteSubPageModel {
				    protected override urlPattern = /^https:\/\/finance\.yahoo\.com\/quote\/\w+\/news\/?$/;
				}
				
				export class YahooFinanceQuoteChartsModel extends YahooFinanceQuoteSubPageModel {
				    protected override urlPattern = /^https:\/\/finance\.yahoo\.com\/quote\/\w+\/chart\/?$/;
				}
				
				export class HistoricalDataModel extends YahooFinanceQuoteSubPageModel {
				    protected override urlPattern = /^https:\/\/finance\.yahoo\.com\/quote\/\w+\/history\/?$/;
				
				    public override async isInPage(): Promise<boolean> {
				        const isValid = await super.isInPage();
				        if (!isValid) {
				            return false;
				        }
				
				        const hasHistoricalData = await this.page.$('table.table.yf-1jecxey');
				        if (!hasHistoricalData) {
				            return false;
				        }
				
				        return true;
				    }
				
				    public async configurePeriod(from: Date, to: Date): Promise<void> {
				        console.log('[HistoricalDataModel] Configuring period:', { from: from.toISOString(), to: to.toISOString() });
				        
				        try {
				            // Click the date range selector button
				            console.log('[HistoricalDataModel] Clicking date range selector...');
				            await this.page.click('button[data-ylk*="date-select"]');
				            
				            // Wait for the date picker section to appear
				            console.log('[HistoricalDataModel] Waiting for date picker to appear...');
				            await this.page.waitForSelector('section[slot="content"]', { visible: true, timeout: 10000 });
				            console.log('[HistoricalDataModel] Date picker appeared');
				            
				            // Format dates to dd-MM-yyyy format for HTML date inputs
				            const fromFormatted = this.formatDate(from);
				            const toFormatted = this.formatDate(to);
				            console.log('[HistoricalDataModel] Formatted dates:', { fromFormatted, toFormatted });
				            
				            // Clear and type in the start date
				            console.log('[HistoricalDataModel] Setting start date...');
				            await this.page.click('input[name="startDate"]', { clickCount: 3 });
				            await this.page.type('input[name="startDate"]', fromFormatted);
				            
				            // Clear and type in the end date
				            console.log('[HistoricalDataModel] Setting end date...');
				            await this.page.click('input[name="endDate"]', { clickCount: 3 });
				            await this.page.type('input[name="endDate"]', toFormatted);
				            
				            // Click the Done button and handle potential navigation
				            console.log('[HistoricalDataModel] Looking for Done button...');
				            await this.page.waitForSelector('button.primary-btn', { timeout: 10000 });
				            console.log('[HistoricalDataModel] Done button found, clicking...');
				            
				            // Click the button and wait for either navigation or timeout
				            const results = await Promise.allSettled([
				                this.page.waitForNavigation({ waitUntil: 'networkidle2', timeout: 10000 }),
				                this.page.click('button.primary-btn')
				            ]);
				            
				            console.log('[HistoricalDataModel] Navigation results:', results.map(r => r.status));
				            
				            // Wait a bit for any potential page updates
				            await new Promise(resolve => setTimeout(resolve, 2000));
				            console.log('[HistoricalDataModel] Period configuration completed');
				            
				        } catch (error) {
				            console.warn('[HistoricalDataModel] Date configuration failed:', error);
				            // Continue execution even if date configuration fails
				        }
				    }
				
				    public async configureFrequency(frequency: 'Daily' | 'Weekly' | 'Monthly'): Promise<void> {
				        console.log('[HistoricalDataModel] Configuring frequency:', frequency);
				        
				        try {
				            // Click the frequency selector button
				            console.log('[HistoricalDataModel] Clicking frequency selector...');
				            await this.page.waitForSelector('button[data-ylk*="interval-select"]');
				            await this.page.click('button[data-ylk*="interval-select"]');
				            
				            // Wait for the dropdown to appear
				            console.log('[HistoricalDataModel] Waiting for frequency dropdown...');
				            await this.page.waitForSelector('div[role="listbox"]', { visible: true });
				            console.log('[HistoricalDataModel] Frequency dropdown appeared');
				            
				            // Map frequency to data-value
				            const frequencyMap = {
				                'Daily': '1d',
				                'Weekly': '1wk', 
				                'Monthly': '1mo'
				            };
				            
				            const dataValue = frequencyMap[frequency];
				            console.log('[HistoricalDataModel] Frequency mapping:', { frequency, dataValue });
				
				            if (!dataValue) {
				                throw new Error(`Invalid frequency: ${frequency}`);
				            }
				            
				            // Click the option with the corresponding data-value
				            console.log('[HistoricalDataModel] Clicking frequency option:', dataValue);
				            await this.page.click(`div[data-value="${dataValue}"]`);
				            console.log('[HistoricalDataModel] Frequency configuration completed');
				            
				        } catch (error) {
				            console.error('[HistoricalDataModel] Frequency configuration failed:', error);
				            throw error;
				        }
				    }
				
				    public async extractHistoricalData(): Promise<HistoricalData[]> {
				        console.log('[HistoricalDataModel] Starting data extraction...');
				        
				        // Wait for the historical data table to load
				        console.log('[HistoricalDataModel] Waiting for historical data table...');
				        await this.page.waitForSelector('table.table.yf-1jecxey');
				        console.log('[HistoricalDataModel] Historical data table found');
				        
				        // Extract data from table rows using element handles
				        console.log('[HistoricalDataModel] Extracting data from table rows...');
				        const rows = await this.page.$$('table.table.yf-1jecxey tbody tr');
				        console.log(`[HistoricalDataModel] Found ${rows.length} table rows`);
				        
				        const historicalData: HistoricalData[] = [];
				        
				        for (const row of rows) {
				            const cells = await row.$$('td');
				            
				            if (cells.length !== 7) {
				                continue; // Skip rows that don't have 7 columns (like dividend rows)
				            }
				            
				            try {
				                // Extract text content from each cell
				                const dateText = await cells[0]?.evaluate(el => el.textContent?.trim() || '') || '';
				                const openText = await cells[1]?.evaluate(el => el.textContent?.trim() || '') || '';
				                const highText = await cells[2]?.evaluate(el => el.textContent?.trim() || '') || '';
				                const lowText = await cells[3]?.evaluate(el => el.textContent?.trim() || '') || '';
				                const closeText = await cells[4]?.evaluate(el => el.textContent?.trim() || '') || '';
				                const volumeText = await cells[6]?.evaluate(el => el.textContent?.trim() || '') || ''; // Skip Adj Close (index 5)
				                
				                // Parse date (format: "Sep 1, 2025" -> "2025-09-01")
				                let formattedDate = '';
				                if (dateText) {
				                    const date = new Date(dateText);
				                    formattedDate = date.toISOString().split('T')[0] || '';
				                }
				                
				                // Helper function to parse numeric values (remove commas)
				                const parseNumber = (text: string): number => {
				                    if (!text) return 0;
				                    return parseFloat(text.replace(/,/g, '')) || 0;
				                };
				                
				                const dataPoint: HistoricalData = {
				                    date: formattedDate,
				                    open: parseNumber(openText),
				                    high: parseNumber(highText),
				                    low: parseNumber(lowText),
				                    close: parseNumber(closeText),
				                    volume: parseNumber(volumeText)
				                };
				                
				                historicalData.push(dataPoint);
				                
				            } catch (error) {
				                console.warn('[HistoricalDataModel] Error parsing row:', error);
				                continue;
				            }
				        }
				    
				        console.log('[HistoricalDataModel] Extracted', historicalData.length, 'rows of historical data');
				        return historicalData;
				    }
				
				
				    private formatDate(date: Date): string {
				        const dayString = date.getDate().toString().padStart(2, '0');
				        const monthString = (date.getMonth() + 1).toString().padStart(2, '0');
				        return `${dayString}-${monthString}-${date.getFullYear()}`;
				    }
				}]]]]><![CDATA[></file>
			<file path='src/pages/sandbox-list.model.ts'/>
			<file path='src/types/index.ts'><![CDATA[
				import type { Page } from "puppeteer";
				
				export type PageModelConstructorArguments = {
				    page: Page;
				    timeout?: number;
				} | {
				    model: PageModel;
				    timeout?: number;
				}
				
				export abstract class PageModel {
				    _page: Page;
				
				    constructor(args: PageModelConstructorArguments) {
				        if ('page' in args) {
				            this._page = args.page;
				        } else if ('model' in args) {
				            this._page = args.model.page;
				        } else {
				            throw new Error("PageModel constructor arguments are not valid");
				        }
				
				        if (args.timeout) {
				            this._page.setDefaultTimeout(args.timeout);
				        }
				    }
				
				    get page(): Page {
				        return this._page;
				    }
				
				    public async isInPage(): Promise<boolean> {
				        return true;
				    }
				
				    public async validatePage(): Promise<void> {
				        const isValid = await this.isInPage();
				        if (!isValid) {
				            throw new Error("Page is not valid");
				        }
				    }
				
				    public async printPage(): Promise<Uint8Array> {
				        return this.page.pdf();
				    }
				}
				
				export interface HistoricalData {
				    date: string;
				    open: number;
				    high: number;
				    low: number;
				    close: number;
				    volume: number;
				}]]]]><![CDATA[></file>
			<file path='src/utils/index.ts'><![CDATA[
				import puppeteer, { Page } from "puppeteer";
				
				export async function launchPage(url: string): Promise<Page> {
				    const browser = await puppeteer.launch({ headless: false });
				    const pages = await browser.pages();
				    const page = pages[0] || (await browser.newPage());
				    await page.goto(url, { waitUntil: 'networkidle2' });
				    return page;
				}
				
				export async function closeBrowser(page: Page): Promise<void> {
				    await page.browser().close();
				}]]]]><![CDATA[></file>
			<file path='tsconfig.json'>
				{
				  // Visit https://aka.ms/tsconfig to read more about this file
				  "compilerOptions": {
				    // File Layout
				    "rootDir": "./src",
				    "outDir": "./dist",
				
				    // Environment Settings
				    // See also https://aka.ms/tsconfig/module
				    "module": "esnext",
				    "target": "es2022",
				    "moduleResolution": "bundler",
				    "allowSyntheticDefaultImports": true,
				    "types": ["node"],
				    "lib": ["esnext", "dom"],
				
				    // Other Outputs
				    "sourceMap": true,
				    "declaration": true,
				    "declarationMap": true,
				
				    // Stricter Typechecking Options
				    "noUncheckedIndexedAccess": true,
				    "exactOptionalPropertyTypes": true,
				
				    // Style Options
				    // "noImplicitReturns": true,
				    // "noImplicitOverride": true,
				    // "noUnusedLocals": true,
				    // "noUnusedParameters": true,
				    // "noFallthroughCasesInSwitch": true,
				    // "noPropertyAccessFromIndexSignature": true,
				
				    // Recommended Options
				    "strict": true,
				    "jsx": "react-jsx",
				    "verbatimModuleSyntax": true,
				    "isolatedModules": true,
				    "noUncheckedSideEffectImports": true,
				    "moduleDetection": "force",
				    "skipLibCheck": true,
				  }
				}</file>
		</files>]]></file>
	<file path='package.json'>
		{
		    "name": "poc-page-object-model",
		    "version": "1.0.0",
		    "description": "Page Object Model POC for RPA Standards using TypeScript and Puppeteer",
		    "type": "module",
		    "main": "src/examples/yahoo-finance-scraper.ts",
		    "scripts": {
		        "start": "npx tsx src/examples/yahoo-finance-scraper.ts",
		        "dev": "npx tsx src/examples/yahoo-finance-scraper.ts",
		        "build": "tsc",
		        "lint": "tsc --noEmit"
		    },
		    "keywords": ["rpa", "page-object-model", "puppeteer", "typescript", "automation"],
		    "author": "RPA Team",
		    "license": "MIT",
		    "devDependencies": {
		        "@types/node": "^24.3.0",
		        "typescript": "^5.9.2"
		    },
		    "dependencies": {
		        "puppeteer": "^24.18.0"
		    }
		}</file>
	<file path='README.md'><![CDATA[
		# Page Object Model POC for RPA Standards
		
		This project demonstrates a standardized approach to implementing the Page Object Model (POM) pattern for Robotic Process Automation (RPA) using TypeScript and Puppeteer.
		
		## 🎯 Purpose
		
		This POC establishes coding standards and architectural patterns for RPA projects, focusing on:
		
		- **Maintainable Code**: Clear separation of concerns using Page Object Model
		- **Type Safety**: Full TypeScript implementation with comprehensive type definitions
		- **Error Handling**: Robust error handling with detailed logging and meaningful error messages
		- **Configuration Management**: Centralized configuration for selectors and browser settings
		- **Documentation**: Comprehensive JSDoc documentation for all public APIs
		
		## 📁 Project Structure
		
		```
		src/
		├── config/                 # Configuration files
		│   ├── browser.config.ts   # Puppeteer browser configurations
		│   └── selectors.config.ts # Centralized CSS selectors
		├── models/                 # Base model classes
		│   ├── base.model.ts       # Abstract PageModel base class
		│   └── index.ts           # Model exports
		├── mixins/                 # Reusable functionality mixins
		│   ├── printable.mixin.ts  # PDF generation capabilities
		│   └── index.ts           # Mixin exports
		├── pages/                  # Page Object Models
		│   ├── home.model.ts       # Yahoo Finance home page
		│   └── quotes/             # Quote-related pages
		│       └── subpage.model.ts # Quote sub-pages (news, history, etc.)
		├── types/                  # TypeScript type definitions
		│   └── index.ts           # Domain-specific types and re-exports
		├── utils/                  # Utility functions
		│   └── index.ts           # Common utilities
		└── examples/              # Usage examples
		    ├── yahoo-finance-scraper.ts # Complete scraping example
		    └── printable-example.ts     # Mixin usage examples
		```
		
		## 🏗️ Architecture Patterns
		
		### Page Object Model (POM)
		
		Each page is represented by a class that encapsulates:
		- **Page validation** (`isInPage()` method)
		- **User interactions** (clicks, form fills, navigation)
		- **Data extraction** (scraping structured data)
		- **Error handling** with meaningful exceptions
		
		```typescript
		import { PageModel, type PageModelConstructorArguments } from "../models";
		
		/**
		 * Example Page Object Model implementation
		 */
		export class YahooFinanceHomeModel extends PageModel {
		    constructor(args: PageModelConstructorArguments) {
		        super(args);
		    }
		
		    /**
		     * Validates if current page is the home page
		     * @throws {Error} When page validation fails
		     */
		    public async isInPage(): Promise<boolean> {
		        // Implementation with error handling
		    }
		
		    /**
		     * Navigates to stock quote page
		     * @param {string} symbol - Stock symbol (e.g., 'AAPL')
		     * @throws {Error} When navigation fails
		     */
		    public async goToQuote(symbol: string): Promise<void> {
		        // Implementation with validation
		    }
		}
		```
		
		### Mixin Pattern for Optional Functionality
		
		The project uses mixins to add optional capabilities without violating SOLID principles:
		
		```typescript
		import { PageModel, type PageModelConstructorArguments } from "../models";
		import { PrintableMixin, type Printable } from "../mixins";
		
		// Basic page model
		class ReportPageModel extends PageModel {
		    constructor(args: PageModelConstructorArguments) {
		        super(args);
		    }
		
		    async generateReport(): Promise<string> {
		        return "Report data";
		    }
		}
		
		// Add printable functionality using mixin
		const PrintableReportModel = PrintableMixin(ReportPageModel);
		
		// Usage
		const reportModel = new PrintableReportModel({ page });
		await reportModel.generateReport(); // Original functionality
		const pdf = await reportModel.printPage(); // Mixin functionality
		```
		
		### Configuration Management
		
		Centralized configuration prevents selector duplication and makes maintenance easier:
		
		```typescript
		// selectors.config.ts
		export const YAHOO_FINANCE_SELECTORS = {
		    HOME: {
		        QUOTE_LOOKUP_INPUT: 'input[data-module="SearchForm"]'
		    },
		    HISTORICAL: {
		        DATA_TABLE: 'table.table.yf-1jecxey'
		    }
		} as const;
		```
		
		### Error Handling Standards
		
		All public methods include:
		- **Input validation** with meaningful error messages
		- **Try-catch blocks** around DOM operations
		- **Detailed logging** for debugging
		- **Typed exceptions** with context information
		
		```typescript
		public async goToQuote(symbol: string): Promise<void> {
		    if (!symbol || typeof symbol !== 'string') {
		        throw new Error('Stock symbol must be a non-empty string');
		    }
		
		    try {
		        // Implementation
		    } catch (error) {
		        console.error('[YahooFinanceHomeModel] Navigation failed:', error);
		        throw new Error(`Failed to navigate to quote for symbol ${symbol}: ${error}`);
		    }
		}
		```
		
		## 🚀 Getting Started
		
		### Prerequisites
		
		- Node.js 16+ 
		- TypeScript 4.5+
		- Puppeteer
		
		### Installation
		
		```bash
		npm install
		```
		
		### Running the Example
		
		```bash
		# Run the Yahoo Finance scraper example
		npx tsx src/examples/yahoo-finance-scraper.ts
		```
		
		## 📖 Usage Examples
		
		### Basic Page Navigation
		
		```typescript
		import puppeteer from 'puppeteer';
		import { YahooFinanceHomeModel } from './pages/home.model';
		import { YahooFinanceQuoteSummaryModel } from './pages/quotes/subpage.model';
		import { DEFAULT_BROWSER_CONFIG } from './config/browser.config';
		
		const browser = await puppeteer.launch(DEFAULT_BROWSER_CONFIG);
		const page = await browser.newPage();
		
		await page.goto('https://finance.yahoo.com/');
		const homeModel = new YahooFinanceHomeModel({ page });
		
		// Validate we're on the correct page
		await homeModel.validatePage();
		
		// Navigate to a stock quote
		await homeModel.goToQuote('AAPL');
		
		// Create quote summary model and navigate to sub-pages
		const quoteSummaryModel = new YahooFinanceQuoteSummaryModel({ page });
		await quoteSummaryModel.validatePage();
		
		// Navigate to historical data using page model method
		const historicalDataModel = await quoteSummaryModel.openHistoricalData();
		```
		
		### Data Extraction
		
		```typescript
		import { HistoricalDataModel } from './pages/quotes/subpage.model';
		
		const historicalModel = new HistoricalDataModel({ page });
		await historicalModel.validatePage();
		
		// Configure date range and frequency
		await historicalModel.configurePeriod(
		    new Date('2025-01-01'), 
		    new Date('2025-12-31')
		);
		await historicalModel.configureFrequency('Daily');
		
		// Extract structured data
		const data = await historicalModel.extractHistoricalData();
		console.log(data); // Array of HistoricalData objects
		```
		
		### Using Mixins for Optional Functionality
		
		```typescript
		import { PageModel, type PageModelConstructorArguments } from "../models";
		import { PrintableMixin, type Printable } from "../mixins";
		
		// Create a printable page model
		class BasicPageModel extends PageModel {
		    constructor(args: PageModelConstructorArguments) {
		        super(args);
		    }
		    
		    async getTitle(): Promise<string> {
		        return this.page.title();
		    }
		}
		
		// Apply mixin to add print functionality
		const PrintablePageModel = PrintableMixin(BasicPageModel);
		
		// Usage with type safety
		const printableModel = new PrintablePageModel({ page });
		await printableModel.getTitle(); // Original functionality
		const pdf = await printableModel.printPage(); // Mixin functionality
		
		// Function that only accepts printable models
		function processPrintablePages(models: Printable[]) {
		    // Type-safe usage of printPage method
		}
		```
		
		## 🛠️ Development Standards
		
		### Code Organization
		
		- **`/src/models/`**: Base classes and abstract models
		- **`/src/mixins/`**: Reusable functionality that can be composed
		- **`/src/pages/`**: Concrete page object implementations
		- **`/src/types/`**: Type definitions and interfaces
		- **`/src/config/`**: Configuration files and constants
		
		### JSDoc Documentation
		
		All public methods must include:
		- **Description** of functionality
		- **Parameter documentation** with types and examples
		- **Return type** documentation
		- **@throws** tags for all possible exceptions
		- **@example** blocks for complex methods
		
		### TypeScript Standards
		
		- **Strict mode** enabled in `tsconfig.json`
		- **Explicit return types** for all public methods
		- **Input validation** for all parameters
		- **Null safety** with proper type guards
		- **Modular imports** from organized folders
		
		### Error Handling
		
		- **Never fail silently** - always throw meaningful errors
		- **Log context** before throwing exceptions
		- **Validate inputs** at method entry points
		- **Use typed exceptions** with descriptive messages
		
		### Logging Standards
		
		- **Consistent prefixes** using class names in brackets
		- **Log all major operations** (navigation, validation, data extraction)
		- **Include relevant context** in log messages
		- **Use appropriate log levels** (info, warn, error)
		
		## 🔧 Configuration
		
		### Browser Settings
		
		Three pre-configured browser setups:
		
		- **`DEFAULT_BROWSER_CONFIG`**: Standard development setup
		- **`HEADLESS_BROWSER_CONFIG`**: Production/CI environment
		- **`DEBUG_BROWSER_CONFIG`**: Development with DevTools and slow motion
		
		### Selector Management
		
		All CSS selectors are centralized in `src/config/selectors.config.ts`:
		
		- **Organized by page/feature**
		- **Typed as const** for IntelliSense support
		- **Descriptive naming** following BEM-like conventions
		- **Easy to update** when UI changes
		
		## 🧪 Testing Strategy
		
		While this POC doesn't include tests, the architecture supports:
		
		- **Unit testing** of individual page methods
		- **Integration testing** of complete user flows
		- **Mock-friendly design** with dependency injection
		- **Deterministic behavior** through proper error handling
		
		## 📋 Best Practices
		
		### Page Object Design
		
		1. **Single Responsibility**: Each page object handles one page/component
		2. **Encapsulation**: Hide implementation details, expose clean APIs
		3. **Validation**: Always validate page state before operations
		4. **Immutability**: Don't modify page objects after creation
		
		### Selector Strategy
		
		1. **Prefer data attributes** over CSS classes for stability
		2. **Use semantic selectors** that reflect business meaning
		3. **Centralize selectors** to avoid duplication
		4. **Document selector purposes** in configuration files
		
		### Error Management
		
		1. **Fail fast** with clear error messages
		2. **Provide context** in all error messages
		3. **Log before throwing** for debugging support
		4. **Use specific error types** for different failure modes
		
		## 🔄 Maintenance
		
		### Updating Selectors
		
		When Yahoo Finance updates their UI:
		
		1. Update selectors in `src/config/selectors.config.ts`
		2. Test with the example scraper
		3. Update documentation if behavior changes
		
		### Adding New Pages
		
		1. Create new page object extending `PageModel`
		2. Implement required abstract methods
		3. Add selectors to configuration
		4. Include comprehensive JSDoc documentation
		5. Add usage example
		
		## 📝 License
		
		This is a proof of concept for internal RPA standards. Adapt as needed for your organization's requirements.
		
		---
		
		**Note**: This POC uses Yahoo Finance as an example target. Always respect robots.txt and terms of service when scraping websites in production.]]></file>
	<file path='src/config/browser.config.ts'>
		/**
		 * Browser configuration for RPA automation
		 * Defines standard settings for Puppeteer browser instances
		 */
		
		import type { LaunchOptions } from 'puppeteer';
		
		/**
		 * Default browser configuration for RPA automation
		 * @description Standard Puppeteer launch options optimized for web scraping and automation
		 */
		export const DEFAULT_BROWSER_CONFIG: LaunchOptions = {
		    headless: false, // Set to true for production environments
		    defaultViewport: {
		        width: 1920,
		        height: 1080
		    },
		    args: [
		        '--no-sandbox',
		        '--disable-setuid-sandbox',
		        '--disable-dev-shm-usage',
		        '--disable-accelerated-2d-canvas',
		        '--no-first-run',
		        '--no-zygote',
		        '--disable-gpu'
		    ]
		};
		
		/**
		 * Headless browser configuration for production environments
		 * @description Optimized for server environments without display
		 */
		export const HEADLESS_BROWSER_CONFIG: LaunchOptions = {
		    ...DEFAULT_BROWSER_CONFIG,
		    headless: true
		};
		
		/**
		 * Debug browser configuration with extended timeouts
		 * @description Useful for development and debugging automation scripts
		 */
		export const DEBUG_BROWSER_CONFIG: LaunchOptions = {
		    ...DEFAULT_BROWSER_CONFIG,
		    headless: false,
		    devtools: true,
		    slowMo: 100 // Slow down operations by 100ms for debugging
		};</file>
	<file path='src/config/selectors.config.ts'>
		/**
		 * Centralized selector configuration for Yahoo Finance automation
		 * @description Maintains all CSS selectors in one place for easier maintenance
		 */
		
		/**
		 * Yahoo Finance selector mappings
		 * @description Contains all selectors used across Yahoo Finance page objects
		 */
		export const YAHOO_FINANCE_SELECTORS = {
		    /** Home page selectors */
		    HOME: {
		        QUOTE_LOOKUP_INPUT: 'input[aria-label="Quote Lookup"]',
		        SEARCH_BUTTON: 'button[data-module="SearchForm"]'
		    },
		    
		    /** Quote page selectors */
		    QUOTE: {
		        QUOTE_LOOKUP_INPUT: 'input[aria-label="Quote Lookup"]',
		        NEWS_TAB: 'a[href*="/news"]',
		        HISTORY_TAB: 'a[href*="/history"]'
		    },
		    
		    /** Historical data selectors */
		    HISTORICAL: {
		        DATE_RANGE_SELECTOR: 'div[data-test="date-picker-full-range"]',
		        DATE_PICKER_MODAL: 'div[data-test="date-picker"]',
		        START_DATE_INPUT: 'input[data-test="start-date"]',
		        END_DATE_INPUT: 'input[data-test="end-date"]',
		        DONE_BUTTON: 'button[data-test="date-picker-done"]',
		        FREQUENCY_SELECTOR: 'div[data-ylk="interval-select"]',
		        FREQUENCY_DROPDOWN: 'div[data-test="select-container"]',
		        DATA_TABLE: 'table.table.yf-1jecxey',
		        TABLE_ROWS: 'table.table.yf-1jecxey tbody tr'
		    }
		} as const;
		
		/**
		 * Common selector patterns for reusability
		 * @description Generic selectors that can be used across different pages
		 */
		export const COMMON_SELECTORS = {
		    LOADING_SPINNER: '[data-test="loading"]',
		    ERROR_MESSAGE: '[data-test="error"]',
		    MODAL_OVERLAY: '[data-test="modal"]',
		    CLOSE_BUTTON: '[data-test="close"]'
		} as const;</file>
	<file path='src/examples/printable-example.ts'><![CDATA[
		import { Page } from "puppeteer";
		import { PageModel, type PageModelConstructorArguments } from "../models";
		import { PrintableMixin, type Printable } from "../mixins";
		
		/**
		 * Example: Basic page model without print functionality
		 */
		class BasicPageModel extends PageModel {
		    constructor(args: PageModelConstructorArguments) {
		        super(args);
		    }
		
		    async getTitle(): Promise<string> {
		        return this.page.title();
		    }
		}
		
		/**
		 * Example: Creating a printable version using the decorator
		 */
		const PrintablePageModel = PrintableMixin(BasicPageModel);
		
		/**
		 * Example: Usage demonstrating type safety
		 */
		export async function demonstrateDecoratorUsage(page: Page) {
		    // Basic model - no print functionality
		    const basicModel = new BasicPageModel({ page });
		    const title = await basicModel.getTitle();
		    console.log('Page title:', title);
		    
		    // This would cause a TypeScript error:
		    // basicModel.printPage(); // ❌ Property 'printPage' does not exist
		    
		    // Printable model - has both basic and print functionality
		    const printableModel = new PrintablePageModel({ page });
		    const printableTitle = await printableModel.getTitle(); // ✅ Basic functionality
		    const pdfBuffer = await printableModel.printPage(); // ✅ Print functionality
		    
		    console.log('Printable page title:', printableTitle);
		    console.log('PDF generated, size:', pdfBuffer.length, 'bytes');
		    
		    // Type safety: printableModel implements both PageModel and Printable
		    const isPrintable: Printable = printableModel; // ✅ Type-safe assignment
		    
		    return { basicModel, printableModel, pdfBuffer };
		}
		
		/**
		 * Example: Creating a specialized printable page model
		 */
		class ReportPageModel extends PageModel {
		    constructor(args: PageModelConstructorArguments) {
		        super(args);
		    }
		
		    async generateReport(): Promise<string> {
		        // Simulate report generation logic
		        return "Report data generated";
		    }
		}
		
		// Create printable version of ReportPageModel
		const PrintableReportPageModel = withPrintable(ReportPageModel);
		
		export async function demonstrateSpecializedPrintable(page: Page) {
		    const reportModel = new PrintableReportPageModel({ page });
		    
		    // Has both report functionality and print functionality
		    const reportData = await reportModel.generateReport(); // ✅ Original functionality
		    const pdfReport = await reportModel.printPage(); // ✅ Decorated functionality
		    
		    console.log('Report:', reportData);
		    console.log('PDF report size:', pdfReport.length, 'bytes');
		    
		    return { reportData, pdfReport };
		}
		
		/**
		 * Example: Function that accepts only printable page models
		 */
		export async function processPrintablePages(models: Printable[]) {
		    const results = [];
		    
		    for (const model of models) {
		        const pdf = await model.printPage(); // ✅ Type-safe - we know it has printPage
		        results.push({
		            size: pdf.length,
		            timestamp: new Date().toISOString()
		        });
		    }
		    
		    return results;
		}]]></file>
	<file path='src/examples/yahoo-finance-scraper.ts'><![CDATA[
		/**
		 * Yahoo Finance Historical Data Scraper Example
		 * @description Demonstrates the Page Object Model pattern for RPA automation
		 * @author RPA Team
		 */
		
		import puppeteer from 'puppeteer';
		import { YahooFinanceHomeModel } from '../pages/home.model';
		import { HistoricalDataModel, YahooFinanceQuoteSummaryModel } from '../pages/quotes/subpage.model';
		import { DEFAULT_BROWSER_CONFIG } from '../config/browser.config';
		
		/**
		 * Main execution function for Yahoo Finance data scraping
		 * @description Orchestrates the complete flow from navigation to data extraction
		 * @throws {Error} When browser launch fails or page navigation errors occur
		 */
		async function main(): Promise<void> {
		    const browser = await puppeteer.launch(DEFAULT_BROWSER_CONFIG);
		    const page = await browser.newPage();
		    
		    try {
		        // Navigate to Yahoo Finance home page
		        await page.goto('https://finance.yahoo.com/', { 
		            waitUntil: 'domcontentloaded',
		            timeout: 60000 
		        });
		        const homeModel = new YahooFinanceHomeModel({ page });
		        await homeModel.validatePage();
		
		        // Search for AAPL stock
		        await homeModel.goToQuote('AAPL');
		        
		        // Create quote summary model and navigate to historical data
		        const quoteSummaryModel = new YahooFinanceQuoteSummaryModel({ page });
		        await quoteSummaryModel.validatePage();
		        
		        // Navigate to historical data page using page model method
		        const historicalDataModel = await quoteSummaryModel.openHistoricalData();
		        await historicalDataModel.validatePage();
		        
		        // Configure date range and frequency
		        await historicalDataModel.configurePeriod(new Date('2025-01-01'), new Date('2025-12-31'));
		        await historicalDataModel.configureFrequency('Daily');
		        
		        // Extract and display historical data
		        const historicalData = await historicalDataModel.extractHistoricalData();
		        console.log(historicalData);
		        
		    } catch (error) {
		        console.error('Scraping failed:', error);
		        throw error;
		    } finally {
		        await browser.close();
		    }
		}
		
		// Execute main function with error handling
		main().catch(console.error);]]></file>
	<file path='src/mixins/index.ts'>
		export { PrintableMixin, type Printable, type Constructor } from './printable.mixin';</file>
	<file path='src/mixins/printable.mixin.ts'><![CDATA[
		import { PageModel } from '../models';
		
		// Printable interface for pages that support PDF generation
		export interface Printable {
		    printPage(): Promise<Uint8Array>;
		}
		
		// Type for constructors that can be mixed in
		export type Constructor<T = {}> = new (...args: any[]) => T;
		
		// Class mixin that adds printable functionality
		export function PrintableMixin<TBase extends Constructor<PageModel>>(Base: TBase) {
		    return class PrintablePageModel extends Base implements Printable {
		        async printPage(): Promise<Uint8Array> {
		            return this._page.pdf();
		        }
		    };
		}]]></file>
	<file path='src/models/base.model.ts'><![CDATA[
		import type { Page } from "puppeteer";
		
		export type PageModelConstructorArguments = {
		    page: Page;
		    timeout?: number;
		} | {
		    model: PageModel;
		    timeout?: number;
		}
		
		export abstract class PageModel {
		    _page: Page;
		
		    constructor(args: PageModelConstructorArguments) {
		        if ('page' in args) {
		            this._page = args.page;
		        } else if ('model' in args) {
		            this._page = args.model.page;
		        } else {
		            throw new Error("PageModel constructor arguments are not valid");
		        }
		
		        if (args.timeout) {
		            this._page.setDefaultTimeout(args.timeout);
		        }
		    }
		
		    get page(): Page {
		        return this._page;
		    }
		
		    public async isInPage(): Promise<boolean> {
		        return true;
		    }
		
		    public async validatePage(): Promise<void> {
		        const isValid = await this.isInPage();
		        if (!isValid) {
		            throw new Error("Page is not valid");
		        }
		    }
		}]]></file>
	<file path='src/models/index.ts'>
		export { PageModel, type PageModelConstructorArguments } from './base.model';</file>
	<file path='src/pages/home.model.ts'><![CDATA[
		import { Page } from "puppeteer";
		import { PageModel, type PageModelConstructorArguments } from "../models";
		import { YAHOO_FINANCE_SELECTORS } from "../config/selectors.config";
		
		/**
		 * Yahoo Finance Home Page Model
		 * @description Handles interactions with the Yahoo Finance home page including navigation and stock symbol searches
		 */
		export class YahooFinanceHomeModel extends PageModel {
		    /**
		     * Creates an instance of YahooFinanceHomeModel
		     * @param {PageModelConstructorArguments} args - Constructor arguments containing page instance
		     */
		    constructor(args: PageModelConstructorArguments) {
		        super(args);
		    }
		
		    /**
		     * Validates if the current page is the Yahoo Finance home page
		     * @description Checks page title and presence of quote lookup input to confirm home page
		     * @returns {Promise<boolean>} True if on Yahoo Finance home page, false otherwise
		     * @throws {Error} When page validation fails due to network or DOM issues
		     */
		    public override async isInPage(): Promise<boolean> {
		        console.log('[YahooFinanceHomeModel] Checking if in home page...');
		        
		        try {
		            const title = await this.page.title();
		            console.log('[YahooFinanceHomeModel] Page title:', title);
		            
		            const hasQuoteLookup = await this.page.$(YAHOO_FINANCE_SELECTORS.HOME.QUOTE_LOOKUP_INPUT);
		            console.log('[YahooFinanceHomeModel] Quote lookup element found:', !!hasQuoteLookup);
		            
		            const isHomePage = title.includes('Yahoo Finance') && !!hasQuoteLookup;
		            console.log('[YahooFinanceHomeModel] Home page validation successful');
		            
		            return isHomePage;
		        } catch (error) {
		            console.error('[YahooFinanceHomeModel] Page validation failed:', error);
		            throw new Error(`Failed to validate Yahoo Finance home page: ${error}`);
		        }
		    }
		
		    /**
		     * Navigates to a specific stock quote page
		     * @description Searches for a stock symbol and navigates to its quote page
		     * @param {string} symbol - Stock symbol to search for (e.g., 'AAPL', 'GOOGL')
		     * @returns {Promise<void>}
		     * @throws {Error} When navigation fails or stock symbol is not found
		     * @example
		     * ```typescript
		     * const homeModel = new YahooFinanceHomeModel({ page });
		     * await homeModel.goToQuote('AAPL');
		     * ```
		     */
		    public async goToQuote(symbol: string): Promise<void> {
		        if (!symbol || typeof symbol !== 'string') {
		            throw new Error('Stock symbol must be a non-empty string');
		        }
		
		        console.log('[YahooFinanceHomeModel] Navigating to quote for symbol:', symbol);
		        
		        try {
		            // Look for the quote lookup input
		            console.log('[YahooFinanceHomeModel] Looking for quote lookup input...');
		            const quoteInput = await this.page.waitForSelector(YAHOO_FINANCE_SELECTORS.HOME.QUOTE_LOOKUP_INPUT);
		            
		            if (!quoteInput) {
		                throw new Error('Quote lookup input not found');
		            }
		            
		            // Clear existing content and type the symbol
		            console.log('[YahooFinanceHomeModel] Typing symbol into input...');
		            await quoteInput.click({ clickCount: 3 }); // Select all existing text
		            await quoteInput.type(symbol);
		            
		            // Press Enter to search
		            console.log('[YahooFinanceHomeModel] Pressing Enter to search...');
		            await Promise.all([
		                this.page.waitForNavigation({ waitUntil: 'networkidle0', timeout: 10000 }).catch(() => {
		                    // Navigation might not trigger a full page reload, that's okay
		                    console.log('[YahooFinanceHomeModel] No full navigation detected, checking URL change...');
		                }),
		                this.page.keyboard.press('Enter')
		            ]);
		            
		            // Wait for URL to change to quote page
		            console.log('[YahooFinanceHomeModel] Waiting for URL to change...');
		            await this.page.waitForFunction(
		                (expectedSymbol) => window.location.href.includes(`/quote/${expectedSymbol}`),
		                { timeout: 15000 },
		                symbol
		            );
		            
		            const finalUrl = this.page.url();
		            console.log('[YahooFinanceHomeModel] Navigation completed. Final URL:', finalUrl);
		            
		            // Validate that we reached the quote page
		            if (!finalUrl.includes(`/quote/${symbol}`)) {
		                throw new Error(`Failed to navigate to quote page for symbol: ${symbol}`);
		            }
		        } catch (error) {
		            console.error('[YahooFinanceHomeModel] Navigation failed:', error);
		            throw new Error(`Failed to navigate to quote for symbol ${symbol}: ${error}`);
		        }
		    }
		}
		
		export default YahooFinanceHomeModel;]]></file>
	<file path='src/pages/quotes/subpage.model.ts'><![CDATA[
		/**
		 * Yahoo Finance Quote Sub-Page Models
		 * @description Page Object Models for Yahoo Finance quote-related pages (news, charts, historical data)
		 * @author RPA Team
		 */
		
		import { PageModel, type PageModelConstructorArguments } from "../../models";
		import { YAHOO_FINANCE_SELECTORS } from "../../config/selectors.config";
		
		/**
		 * Abstract base class for Yahoo Finance quote sub-pages
		 * @description Provides common functionality for all quote-related sub-pages
		 * @abstract
		 * @extends PageModel
		 */
		export abstract class YahooFinanceQuoteSubPageModel extends PageModel {
		    /** URL pattern that validates the specific sub-page */
		    protected abstract urlPattern: RegExp;
		
		    /**
		     * Creates an instance of YahooFinanceQuoteSubPageModel
		     * @param {PageModelConstructorArguments} args - Constructor arguments containing page instance
		     */
		    constructor(args: PageModelConstructorArguments) {
		        super(args);
		    }
		
		    /**
		     * Validates if the current page matches the expected quote sub-page
		     * @description Checks for quote lookup element and validates URL pattern
		     * @returns {Promise<boolean>} True if on the correct quote sub-page, false otherwise
		     * @throws {Error} When page validation fails due to network or DOM issues
		     */
		    public override async isInPage(): Promise<boolean> {
		        console.log('[YahooFinanceQuoteSubPageModel] Checking if in page...');
		        
		        try {
		            // Common requirement for all quote pages - presence of quote lookup
		            const hasQuoteLookup = await this.page.$(YAHOO_FINANCE_SELECTORS.QUOTE.QUOTE_LOOKUP_INPUT);
		            console.log('[YahooFinanceQuoteSubPageModel] Quote lookup element found:', !!hasQuoteLookup);
		            if (!hasQuoteLookup) return false;
		
		            // Validate URL against the pattern defined in the subclass
		            const url = this.page.url();
		            const isValidUrl = this.urlPattern.test(url);
		            console.log('[YahooFinanceQuoteSubPageModel] URL validation:', { url, pattern: this.urlPattern.toString(), isValid: isValidUrl });
		            return isValidUrl;
		        } catch (error) {
		            console.error('[YahooFinanceQuoteSubPageModel] Page validation failed:', error);
		            throw new Error(`Failed to validate quote sub-page: ${error}`);
		        }
		    }
		
		    public async openSummary(): Promise<YahooFinanceQuoteSummaryModel> {
		        await this.goToSubPage('summary');
		        return new YahooFinanceQuoteSummaryModel({ page: this.page });
		    }
		
		    public async openNews(): Promise<YahooFinanceQuoteNewsModel> {
		        await this.goToSubPage('news');
		        return new YahooFinanceQuoteNewsModel({ page: this.page });
		    }
		
		    public async openCharts(): Promise<YahooFinanceQuoteChartsModel> {
		        await this.goToSubPage('chart');
		        return new YahooFinanceQuoteChartsModel({ page: this.page });
		    }
		
		    public async openHistoricalData(): Promise<HistoricalDataModel> {
		        await this.goToSubPage('history');
		        return new HistoricalDataModel({ page: this.page });
		    }
		
		    private async goToSubPage(category: 'summary' | 'news' | 'chart' | 'history'): Promise<void> {
		        console.log(`[YahooFinanceQuoteSubPageModel] Navigating to ${category} page...`);
		        
		        const currentUrl = this.page.url();
		        // Remove trailing slash and any existing subpage paths
		        const baseUrl = currentUrl.replace(/\/(news|chart|chart|history)\/?$/, '').replace(/\/$/, '');
		        
		        let targetUrl: string;
		        if (category === 'summary') {
		            targetUrl = baseUrl + '/';
		        } else if (category === 'chart') {
		            targetUrl = `${baseUrl}/chart`;
		        } else {
		            targetUrl = `${baseUrl}/${category}`;
		        }
		        
		        console.log(`[YahooFinanceQuoteSubPageModel] Navigation details:`, { currentUrl, baseUrl, targetUrl, category });
		        
		        try {
		            await this.page.goto(targetUrl, { waitUntil: 'domcontentloaded', timeout: 15000 });
		            console.log(`[YahooFinanceQuoteSubPageModel] Successfully navigated to ${category} page`);
		        } catch (error) {
		            console.error(`[YahooFinanceQuoteSubPageModel] Navigation to ${category} failed:`, error);
		            throw error;
		        }
		    }
		}
		
		
		import type { HistoricalData } from "../../types";
		
		export class YahooFinanceQuoteSummaryModel extends YahooFinanceQuoteSubPageModel {
		    protected override urlPattern = /^https:\/\/finance\.yahoo\.com\/quote\/\w+\/?$/;
		}
		
		export class YahooFinanceQuoteNewsModel extends YahooFinanceQuoteSubPageModel {
		    protected override urlPattern = /^https:\/\/finance\.yahoo\.com\/quote\/\w+\/news\/?$/;
		}
		
		export class YahooFinanceQuoteChartsModel extends YahooFinanceQuoteSubPageModel {
		    protected override urlPattern = /^https:\/\/finance\.yahoo\.com\/quote\/\w+\/chart\/?$/;
		}
		
		export class HistoricalDataModel extends YahooFinanceQuoteSubPageModel {
		    protected override urlPattern = /^https:\/\/finance\.yahoo\.com\/quote\/\w+\/history\/?$/;
		
		    public override async isInPage(): Promise<boolean> {
		        const isValid = await super.isInPage();
		        if (!isValid) {
		            return false;
		        }
		
		        const hasHistoricalData = await this.page.$('table.table.yf-1jecxey');
		        if (!hasHistoricalData) {
		            return false;
		        }
		
		        return true;
		    }
		
		    public async configurePeriod(from: Date, to: Date): Promise<void> {
		        console.log('[HistoricalDataModel] Configuring period:', { from: from.toISOString(), to: to.toISOString() });
		        
		        try {
		            // Click the date range selector button
		            console.log('[HistoricalDataModel] Clicking date range selector...');
		            await this.page.click('button[data-ylk*="date-select"]');
		            
		            // Wait for the date picker section to appear
		            console.log('[HistoricalDataModel] Waiting for date picker to appear...');
		            await this.page.waitForSelector('section[slot="content"]', { visible: true, timeout: 10000 });
		            console.log('[HistoricalDataModel] Date picker appeared');
		            
		            // Format dates to dd-MM-yyyy format for HTML date inputs
		            const fromFormatted = this.formatDate(from);
		            const toFormatted = this.formatDate(to);
		            console.log('[HistoricalDataModel] Formatted dates:', { fromFormatted, toFormatted });
		            
		            // Clear and type in the start date
		            console.log('[HistoricalDataModel] Setting start date...');
		            await this.page.click('input[name="startDate"]', { clickCount: 3 });
		            await this.page.type('input[name="startDate"]', fromFormatted);
		            
		            // Clear and type in the end date
		            console.log('[HistoricalDataModel] Setting end date...');
		            await this.page.click('input[name="endDate"]', { clickCount: 3 });
		            await this.page.type('input[name="endDate"]', toFormatted);
		            
		            // Click the Done button and handle potential navigation
		            console.log('[HistoricalDataModel] Looking for Done button...');
		            await this.page.waitForSelector('button.primary-btn', { timeout: 10000 });
		            console.log('[HistoricalDataModel] Done button found, clicking...');
		            
		            // Click the button and wait for either navigation or timeout
		            const results = await Promise.allSettled([
		                this.page.waitForNavigation({ waitUntil: 'networkidle2', timeout: 10000 }),
		                this.page.click('button.primary-btn')
		            ]);
		            
		            console.log('[HistoricalDataModel] Navigation results:', results.map(r => r.status));
		            
		            // Wait a bit for any potential page updates
		            await new Promise(resolve => setTimeout(resolve, 2000));
		            console.log('[HistoricalDataModel] Period configuration completed');
		            
		        } catch (error) {
		            console.warn('[HistoricalDataModel] Date configuration failed:', error);
		            // Continue execution even if date configuration fails
		        }
		    }
		
		    public async configureFrequency(frequency: 'Daily' | 'Weekly' | 'Monthly'): Promise<void> {
		        console.log('[HistoricalDataModel] Configuring frequency:', frequency);
		        
		        try {
		            // Click the frequency selector button
		            console.log('[HistoricalDataModel] Clicking frequency selector...');
		            await this.page.waitForSelector('button[data-ylk*="interval-select"]');
		            await this.page.click('button[data-ylk*="interval-select"]');
		            
		            // Wait for the dropdown to appear
		            console.log('[HistoricalDataModel] Waiting for frequency dropdown...');
		            await this.page.waitForSelector('div[role="listbox"]', { visible: true });
		            console.log('[HistoricalDataModel] Frequency dropdown appeared');
		            
		            // Map frequency to data-value
		            const frequencyMap = {
		                'Daily': '1d',
		                'Weekly': '1wk', 
		                'Monthly': '1mo'
		            };
		            
		            const dataValue = frequencyMap[frequency];
		            console.log('[HistoricalDataModel] Frequency mapping:', { frequency, dataValue });
		
		            if (!dataValue) {
		                throw new Error(`Invalid frequency: ${frequency}`);
		            }
		            
		            // Click the option with the corresponding data-value
		            console.log('[HistoricalDataModel] Clicking frequency option:', dataValue);
		            await this.page.click(`div[data-value="${dataValue}"]`);
		            console.log('[HistoricalDataModel] Frequency configuration completed');
		            
		        } catch (error) {
		            console.error('[HistoricalDataModel] Frequency configuration failed:', error);
		            throw error;
		        }
		    }
		
		    public async extractHistoricalData(): Promise<HistoricalData[]> {
		        console.log('[HistoricalDataModel] Starting data extraction...');
		        
		        // Wait for the historical data table to load
		        console.log('[HistoricalDataModel] Waiting for historical data table...');
		        await this.page.waitForSelector('table.table.yf-1jecxey');
		        console.log('[HistoricalDataModel] Historical data table found');
		        
		        // Extract data from table rows using element handles
		        console.log('[HistoricalDataModel] Extracting data from table rows...');
		        const rows = await this.page.$$('table.table.yf-1jecxey tbody tr');
		        console.log(`[HistoricalDataModel] Found ${rows.length} table rows`);
		        
		        const historicalData: HistoricalData[] = [];
		        
		        for (const row of rows) {
		            const cells = await row.$$('td');
		            
		            if (cells.length !== 7) {
		                continue; // Skip rows that don't have 7 columns (like dividend rows)
		            }
		            
		            try {
		                // Extract text content from each cell
		                const dateText = await cells[0]?.evaluate(el => el.textContent?.trim() || '') || '';
		                const openText = await cells[1]?.evaluate(el => el.textContent?.trim() || '') || '';
		                const highText = await cells[2]?.evaluate(el => el.textContent?.trim() || '') || '';
		                const lowText = await cells[3]?.evaluate(el => el.textContent?.trim() || '') || '';
		                const closeText = await cells[4]?.evaluate(el => el.textContent?.trim() || '') || '';
		                const volumeText = await cells[6]?.evaluate(el => el.textContent?.trim() || '') || ''; // Skip Adj Close (index 5)
		                
		                // Parse date (format: "Sep 1, 2025" -> "2025-09-01")
		                let formattedDate = '';
		                if (dateText) {
		                    const date = new Date(dateText);
		                    formattedDate = date.toISOString().split('T')[0] || '';
		                }
		                
		                // Helper function to parse numeric values (remove commas)
		                const parseNumber = (text: string): number => {
		                    if (!text) return 0;
		                    return parseFloat(text.replace(/,/g, '')) || 0;
		                };
		                
		                const dataPoint: HistoricalData = {
		                    date: formattedDate,
		                    open: parseNumber(openText),
		                    high: parseNumber(highText),
		                    low: parseNumber(lowText),
		                    close: parseNumber(closeText),
		                    volume: parseNumber(volumeText)
		                };
		                
		                historicalData.push(dataPoint);
		                
		            } catch (error) {
		                console.warn('[HistoricalDataModel] Error parsing row:', error);
		                continue;
		            }
		        }
		    
		        console.log('[HistoricalDataModel] Extracted', historicalData.length, 'rows of historical data');
		        return historicalData;
		    }
		
		
		    private formatDate(date: Date): string {
		        const dayString = date.getDate().toString().padStart(2, '0');
		        const monthString = (date.getMonth() + 1).toString().padStart(2, '0');
		        return `${dayString}-${monthString}-${date.getFullYear()}`;
		    }
		}]]></file>
	<file path='src/pages/sandbox-list.model.ts'/>
	<file path='src/types/index.ts'>
		// Re-export from organized modules
		export { PageModel, type PageModelConstructorArguments } from '../models';
		export { PrintableMixin, type Printable, type Constructor } from '../mixins';
		
		// Domain-specific types
		export interface HistoricalData {
		    date: string;
		    open: number;
		    high: number;
		    low: number;
		    close: number;
		    volume: number;
		}</file>
	<file path='src/utils/index.ts'><![CDATA[
		import puppeteer, { Page } from "puppeteer";
		
		export async function launchPage(url: string): Promise<Page> {
		    const browser = await puppeteer.launch({ headless: false });
		    const pages = await browser.pages();
		    const page = pages[0] || (await browser.newPage());
		    await page.goto(url, { waitUntil: 'networkidle2' });
		    return page;
		}
		
		export async function closeBrowser(page: Page): Promise<void> {
		    await page.browser().close();
		}]]></file>
	<file path='tsconfig.json'>
		{
		  // Visit https://aka.ms/tsconfig to read more about this file
		  "compilerOptions": {
		    // File Layout
		    "rootDir": "./src",
		    "outDir": "./dist",
		
		    // Environment Settings
		    // See also https://aka.ms/tsconfig/module
		    "module": "esnext",
		    "target": "es2022",
		    "moduleResolution": "bundler",
		    "allowSyntheticDefaultImports": true,
		    "types": ["node"],
		    "lib": ["esnext", "dom"],
		
		    // Other Outputs
		    "sourceMap": true,
		    "declaration": true,
		    "declarationMap": true,
		
		    // Stricter Typechecking Options
		    "noUncheckedIndexedAccess": true,
		    "exactOptionalPropertyTypes": true,
		
		    // Style Options
		    // "noImplicitReturns": true,
		    // "noImplicitOverride": true,
		    // "noUnusedLocals": true,
		    // "noUnusedParameters": true,
		    // "noFallthroughCasesInSwitch": true,
		    // "noPropertyAccessFromIndexSignature": true,
		
		    // Recommended Options
		    "strict": true,
		    "jsx": "react-jsx",
		    "verbatimModuleSyntax": true,
		    "isolatedModules": true,
		    "noUncheckedSideEffectImports": true,
		    "moduleDetection": "force",
		    "skipLibCheck": true,
		  }
		}</file>
</files>
